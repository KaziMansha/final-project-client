{"ast":null,"code":"var _jsxFileName = \"/Users/kazimansha/Documents/GitHub/final-project-client/src/components/containers/CampusContainer.js\";\n/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk } from \"../../store/thunks\";\nimport { Redirect } from 'react-router-dom';\nimport { CampusView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CampusContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.handleDelete = async event => {\n      await this.props.deleteCampus(this.props.campusId);\n      this.setState({\n        redirect: true\n      });\n    };\n    this.state = {\n      redirect: false\n    };\n  }\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/campuses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId))\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchCampusThunk","deleteCampusThunk","Redirect","CampusView","CampusContainer","constructor","props","handleDelete","event","deleteCampus","campusId","setState","redirect","state","componentDidMount","fetchCampus","match","params","id","render","campus","mapState","mapDispatch","dispatch"],"sources":["/Users/kazimansha/Documents/GitHub/final-project-client/src/components/containers/CampusContainer.js"],"sourcesContent":["/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk } from \"../../store/thunks\";\nimport { Redirect } from 'react-router-dom';\nimport { CampusView } from \"../views\";\n\nclass CampusContainer extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirect: false\n    };\n  }\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  handleDelete = async (event) => {\n    await this.props.deleteCampus(this.props.campusId);\n    this.setState({ redirect: true })\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    if (this.state.redirect) {\n      return (\n        <Redirect to = \"/campuses\"/>\n      )\n    }\n    return (\n      <div>\n        <Header />\n        <CampusView campus={this.props.campus} />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId))\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,gBAAgB,EAAEC,iBAAiB,QAAQ,oBAAoB;AACxE,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,UAAU,QAAQ,UAAU;AAAC;AAEtC,MAAMC,eAAe,SAASN,SAAS,CAAC;EAEtCO,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAWfC,YAAY,GAAG,MAAOC,KAAK,IAAK;MAC9B,MAAM,IAAI,CAACF,KAAK,CAACG,YAAY,CAAC,IAAI,CAACH,KAAK,CAACI,QAAQ,CAAC;MAClD,IAAI,CAACC,QAAQ,CAAC;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC;IACnC,CAAC;IAbC,IAAI,CAACC,KAAK,GAAG;MACXD,QAAQ,EAAE;IACZ,CAAC;EACH;EACA;EACAE,iBAAiB,GAAG;IAClB;IACA,IAAI,CAACR,KAAK,CAACS,WAAW,CAAC,IAAI,CAACT,KAAK,CAACU,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC;EACpD;EAOA;EACAC,MAAM,GAAG;IACP,IAAI,IAAI,CAACN,KAAK,CAACD,QAAQ,EAAE;MACvB,oBACE,QAAC,QAAQ;QAAC,EAAE,EAAG;MAAW;QAAA;QAAA;QAAA;MAAA,QAAE;IAEhC;IACA,oBACE;MAAA,wBACE,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA,QAAG,eACV,QAAC,UAAU;QAAC,MAAM,EAAE,IAAI,CAACN,KAAK,CAACc;MAAO;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACrC;EAEV;AACF;;AAEA;AACA;AACA;AACA,MAAMC,QAAQ,GAAIR,KAAK,IAAK;EAC1B,OAAO;IACLO,MAAM,EAAEP,KAAK,CAACO,MAAM,CAAG;EACzB,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAME,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLR,WAAW,EAAGG,EAAE,IAAKK,QAAQ,CAACvB,gBAAgB,CAACkB,EAAE,CAAC,CAAC;IACnDT,YAAY,EAAGC,QAAQ,IAAKa,QAAQ,CAACtB,iBAAiB,CAACS,QAAQ,CAAC;EAClE,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,eAAeX,OAAO,CAACsB,QAAQ,EAAEC,WAAW,CAAC,CAAClB,eAAe,CAAC"},"metadata":{},"sourceType":"module"}