{"ast":null,"code":"var _jsxFileName = \"/Users/kazimansha/Documents/GitHub/final-project-client/src/components/containers/EditCampusContainer.js\";\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport EditCampusView from '../views/EditCampusView';\nimport { Redirect } from 'react-router-dom';\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass EditCampusContainer extends Component {\n  componentDidMount() {\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n  constructor(props) {\n    super(props);\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n      let {\n        campus\n      } = this.props;\n      campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        campusImg: this.state.campusImg,\n        id: campus.id\n      };\n      await this.props.editCampus(campus);\n      this.setState({\n        redirect: true\n      });\n    };\n    this.state = {\n      redirect: false\n    };\n  }\n  // Capture input data when it is entered\n\n  render() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campuses`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    editCampus: campus => dispatch(editCampusThunk(campus))\n  };\n};\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","EditCampusView","Redirect","fetchCampusThunk","editCampusThunk","EditCampusContainer","componentDidMount","props","fetchCampus","match","params","id","constructor","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","state","address","description","campusImg","editCampus","redirect","render","mapState","mapDispatch","dispatch"],"sources":["/Users/kazimansha/Documents/GitHub/final-project-client/src/components/containers/EditCampusContainer.js"],"sourcesContent":["import Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport EditCampusView from '../views/EditCampusView';\nimport { Redirect } from 'react-router-dom';\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\n\nclass EditCampusContainer extends Component {\n    componentDidMount() {\n        this.props.fetchCampus(this.props.match.params.id);\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false\n        };\n    }\n    // Capture input data when it is entered\n    handleChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    // Take action after user click the submit button\n    handleSubmit = async event => {\n        event.preventDefault();  // Prevent browser reload/refresh after submit.\n        let { campus } = this.props;\n\n        campus = {\n            name: this.state.name,\n            address: this.state.address,\n            description: this.state.description,\n            campusImg: this.state.campusImg,\n            id: campus.id\n        };\n\n        await this.props.editCampus(campus);\n\n        this.setState({\n            redirect: true\n        });\n\n    }\n\n    render() {\n        if (this.state.redirect) {\n            return (<Redirect to={`/campuses`} />)\n        }\n\n        return (\n            <div>\n                <Header />\n                <EditCampusView handleChange={this.handleChange} handleSubmit={this.handleSubmit} />\n            </div>\n        );\n    }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = (state) => {\n    return {\n        campus: state.campus,  // Get the State object from Reducer \"campus\"\n    };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return {\n        fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n        editCampus: (campus) => dispatch(editCampusThunk(campus))\n    };\n};\n\nexport default connect(mapState, mapDispatch)(EditCampusContainer) "],"mappings":";AAAA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAOC,cAAc,MAAM,yBAAyB;AACpD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,gBAAgB,EAAEC,eAAe,QAAQ,oBAAoB;AAAC;AAEvE,MAAMC,mBAAmB,SAASN,SAAS,CAAC;EACxCO,iBAAiB,GAAG;IAChB,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,IAAI,CAACD,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC;EACtD;EAEAC,WAAW,CAACL,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAAC,KAMjBM,YAAY,GAAGC,KAAK,IAAI;MACpB,IAAI,CAACC,QAAQ,CAAC;QACV,CAACD,KAAK,CAACE,MAAM,CAACC,IAAI,GAAGH,KAAK,CAACE,MAAM,CAACE;MACtC,CAAC,CAAC;IACN,CAAC;IAAA,KAGDC,YAAY,GAAG,MAAML,KAAK,IAAI;MAC1BA,KAAK,CAACM,cAAc,EAAE,CAAC,CAAE;MACzB,IAAI;QAAEC;MAAO,CAAC,GAAG,IAAI,CAACd,KAAK;MAE3Bc,MAAM,GAAG;QACLJ,IAAI,EAAE,IAAI,CAACK,KAAK,CAACL,IAAI;QACrBM,OAAO,EAAE,IAAI,CAACD,KAAK,CAACC,OAAO;QAC3BC,WAAW,EAAE,IAAI,CAACF,KAAK,CAACE,WAAW;QACnCC,SAAS,EAAE,IAAI,CAACH,KAAK,CAACG,SAAS;QAC/Bd,EAAE,EAAEU,MAAM,CAACV;MACf,CAAC;MAED,MAAM,IAAI,CAACJ,KAAK,CAACmB,UAAU,CAACL,MAAM,CAAC;MAEnC,IAAI,CAACN,QAAQ,CAAC;QACVY,QAAQ,EAAE;MACd,CAAC,CAAC;IAEN,CAAC;IA9BG,IAAI,CAACL,KAAK,GAAG;MACTK,QAAQ,EAAE;IACd,CAAC;EACL;EACA;;EA4BAC,MAAM,GAAG;IACL,IAAI,IAAI,CAACN,KAAK,CAACK,QAAQ,EAAE;MACrB,oBAAQ,QAAC,QAAQ;QAAC,EAAE,EAAG;MAAW;QAAA;QAAA;QAAA;MAAA,QAAG;IACzC;IAEA,oBACI;MAAA,wBACI,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA,QAAG,eACV,QAAC,cAAc;QAAC,YAAY,EAAE,IAAI,CAACd,YAAa;QAAC,YAAY,EAAE,IAAI,CAACM;MAAa;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAClF;EAEd;AACJ;;AAEA;AACA;AACA,MAAMU,QAAQ,GAAIP,KAAK,IAAK;EACxB,OAAO;IACHD,MAAM,EAAEC,KAAK,CAACD,MAAM,CAAG;EAC3B,CAAC;AACL,CAAC;AACD;AACA;AACA,MAAMS,WAAW,GAAIC,QAAQ,IAAK;EAC9B,OAAO;IACHvB,WAAW,EAAGG,EAAE,IAAKoB,QAAQ,CAAC5B,gBAAgB,CAACQ,EAAE,CAAC,CAAC;IACnDe,UAAU,EAAGL,MAAM,IAAKU,QAAQ,CAAC3B,eAAe,CAACiB,MAAM,CAAC;EAC5D,CAAC;AACL,CAAC;AAED,eAAerB,OAAO,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,CAACzB,mBAAmB,CAAC"},"metadata":{},"sourceType":"module"}